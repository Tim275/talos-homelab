# Control plane specific settings only - common config comes from common.yaml.tftpl

machine:
  network:
    interfaces:
      - deviceSelector:
          hardwareAddr: ${mac_address}
        addresses:
          - ${ip}/${subnet_mask}
        routes:
          - network: 0.0.0.0/0
            gateway: ${gateway}
        dhcp: false
%{ if vip != null }
        vip:
          ip: ${vip}
%{ endif }

cluster:
  allowSchedulingOnControlPlanes: true
  controllerManager:
    extraArgs:
      bind-address: 0.0.0.0
  scheduler:
    extraArgs:
      bind-address: 0.0.0.0
  etcd:
    extraArgs:
      listen-metrics-urls: http://0.0.0.0:2381
  network:
    cni:
      name: none
  proxy:
    disabled: true
  discovery:
    enabled: true
    registries:
      service:
        disabled: false
  extraManifests: ${extra_manifests}
  inlineManifests: ${inline_manifests}

# ========================================================================
# ERKLÄRUNG: Was diese control-plane.yaml.tftpl bewirkt
# ========================================================================
#
# ZWECK:
# - Control Plane spezifische Konfiguration (Master Nodes)
# - Wird MIT common.yaml.tftpl kombiniert (wie @vehagn macht)
#
# WAS HIER KONFIGURIERT WIRD:
#
# 1. SCHEDULING auf Control Planes erlaubt:
#    - allowSchedulingOnControlPlanes: true
#    - Wichtig für kleine Homelab Setups wo jeder Node genutzt werden soll
#
# 2. CNI & PROXY deaktiviert:
#    - cni.name: none → Cilium wird separat installiert
#    - proxy.disabled: true → Cilium ersetzt kube-proxy
#
# 3. GATEWAY API CRDs:
#    - Automatisch installiert beim Bootstrap
#    - Nötig für moderne Ingress/Gateway Konfiguration
#
# 4. CILIUM Bootstrap:
#    - Inline Manifests für Cilium Installation
#    - Values als ConfigMap für spätere Anpassungen
#
# RESULTAT: Control Planes die auch Workloads ausführen können (Homelab-optimiert)
# ========================================================================