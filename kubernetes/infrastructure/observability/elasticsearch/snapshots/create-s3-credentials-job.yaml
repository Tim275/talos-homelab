# Job: Extract S3 credentials from ObjectBucketClaim and create ECK SecureSettings Secret
# This job reads the auto-generated S3 credentials and formats them for Elasticsearch keystore
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-snapshot-setup
  namespace: elastic-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: elasticsearch-snapshot-setup
  namespace: elastic-system
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elasticsearch-snapshot-setup
  namespace: elastic-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: elasticsearch-snapshot-setup
subjects:
- kind: ServiceAccount
  name: elasticsearch-snapshot-setup
  namespace: elastic-system
---
apiVersion: batch/v1
kind: Job
metadata:
  name: elasticsearch-s3-credentials-setup
  namespace: elastic-system
  labels:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: backup
spec:
  ttlSecondsAfterFinished: 600  # Cleanup after 10 minutes
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/component: backup
    spec:
      serviceAccountName: elasticsearch-snapshot-setup
      restartPolicy: OnFailure
      containers:
      - name: create-credentials
        image: bitnami/kubectl:1.31
        command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail

          echo "üì¶ Elasticsearch S3 Snapshot Credentials Setup"
          echo "=============================================="

          # Wait for ObjectBucketClaim to be ready
          echo "‚è≥ Waiting for ObjectBucketClaim to be ready..."
          kubectl wait --for=condition=Ready objectbucketclaim/elasticsearch-snapshots -n elastic-system --timeout=300s || {
            echo "‚ùå ObjectBucketClaim not ready after 5 minutes"
            exit 1
          }

          echo "‚úÖ ObjectBucketClaim ready"

          # Extract S3 credentials from auto-generated secret
          echo "üîê Extracting S3 credentials..."

          ACCESS_KEY=$(kubectl get secret elasticsearch-snapshots -n elastic-system -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 -d)
          SECRET_KEY=$(kubectl get secret elasticsearch-snapshots -n elastic-system -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 -d)
          BUCKET_HOST=$(kubectl get configmap elasticsearch-snapshots -n elastic-system -o jsonpath='{.data.BUCKET_HOST}')
          BUCKET_NAME=$(kubectl get configmap elasticsearch-snapshots -n elastic-system -o jsonpath='{.data.BUCKET_NAME}')

          echo "‚úÖ S3 Endpoint: $BUCKET_HOST"
          echo "‚úÖ S3 Bucket: $BUCKET_NAME"

          # Create ECK SecureSettings Secret
          # This secret will be mounted into Elasticsearch keystore
          echo "üîë Creating ECK SecureSettings Secret..."

          kubectl create secret generic elasticsearch-s3-credentials \
            --from-literal=s3.client.default.access_key="$ACCESS_KEY" \
            --from-literal=s3.client.default.secret_key="$SECRET_KEY" \
            --dry-run=client -o yaml -n elastic-system | kubectl apply -f -

          echo "‚úÖ ECK SecureSettings Secret created: elasticsearch-s3-credentials"

          # Create ConfigMap with S3 endpoint info for snapshot repository job
          echo "üìù Creating S3 endpoint ConfigMap..."

          kubectl create configmap elasticsearch-s3-config \
            --from-literal=endpoint="http://$BUCKET_HOST" \
            --from-literal=bucket="$BUCKET_NAME" \
            --dry-run=client -o yaml -n elastic-system | kubectl apply -f -

          echo "‚úÖ S3 Config ConfigMap created: elasticsearch-s3-config"
          echo "üéâ Elasticsearch S3 Credentials Setup Complete!"
          echo ""
          echo "Next steps:"
          echo "1. Restart Elasticsearch pods to load new keystore"
          echo "2. Create snapshot repository via API"
          echo "3. Configure SLM policy for automated snapshots"
