apiVersion: grafana.integreatly.org/v1beta1
kind: GrafanaDashboard
metadata:
  name: istio-mesh-overview
  namespace: grafana
  labels:
    app.kubernetes.io/part-of: monitoring-stack
    tier: networking
spec:
  allowCrossNamespaceImport: true
  instanceSelector:
    matchLabels:
      app: grafana
  json: |
    {
      "id": null,
      "title": "üï∏Ô∏è Istio Service Mesh Overview",
      "tags": ["istio", "service-mesh", "networking", "microservices"],
      "timezone": "browser",
      "panels": [
        {
          "id": 1,
          "title": "Istio Service Mesh Platform",
          "type": "text",
          "gridPos": {"h": 4, "w": 24, "x": 0, "y": 0},
          "options": {
            "content": "<div style=\"text-align: center; font-size: 24px; padding: 20px; background: linear-gradient(90deg, #466bb0, #7cc7e8);\">\n<img src=\"https://raw.githubusercontent.com/istio/istio/master/logo/istio-whitelogo-bluebackground-framed.svg\" alt=\"Istio\" style=\"height: 60px; vertical-align: middle; margin-right: 20px;\">\n<strong style=\"color: white;\">üï∏Ô∏è Istio Service Mesh Control Plane</strong>\n<p style=\"font-size: 16px; color: #ccc; margin-top: 10px;\">Connect ‚Ä¢ Secure ‚Ä¢ Control ‚Ä¢ Observe</p>\n</div>"
          }
        },
        {
          "id": 2,
          "title": "Mesh Health Score",
          "type": "gauge",
          "targets": [
            {
              "expr": "(count(istio_request_total{source_app!=\"unknown\"}) / count(istio_request_total)) * 100",
              "legendFormat": "Service Mesh Coverage"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "thresholds": {
                "steps": [
                  {"color": "red", "value": 0},
                  {"color": "yellow", "value": 60},
                  {"color": "green", "value": 85}
                ]
              },
              "min": 0,
              "max": 100,
              "unit": "percent"
            }
          },
          "gridPos": {"h": 8, "w": 6, "x": 0, "y": 4}
        },
        {
          "id": 3,
          "title": "Service Mesh Metrics",
          "type": "stat",
          "targets": [
            {
              "expr": "count(count by (destination_service_name) (istio_request_total))",
              "legendFormat": "Services"
            },
            {
              "expr": "count(count by (source_workload, destination_workload) (istio_request_total))",
              "legendFormat": "Connections"
            },
            {
              "expr": "sum(rate(istio_request_total[5m]))",
              "legendFormat": "RPS"
            }
          ],
          "gridPos": {"h": 8, "w": 6, "x": 6, "y": 4}
        },
        {
          "id": 4,
          "title": "Success Rate",
          "type": "gauge",
          "targets": [
            {
              "expr": "(sum(rate(istio_request_total{response_code!~\"5..\"}[5m])) / sum(rate(istio_request_total[5m]))) * 100",
              "legendFormat": "Global Success Rate"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "thresholds": {
                "steps": [
                  {"color": "red", "value": 0},
                  {"color": "yellow", "value": 95},
                  {"color": "green", "value": 99}
                ]
              },
              "min": 0,
              "max": 100,
              "unit": "percent"
            }
          },
          "gridPos": {"h": 8, "w": 6, "x": 12, "y": 4}
        },
        {
          "id": 5,
          "title": "Response Time P99",
          "type": "gauge",
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(rate(istio_request_duration_milliseconds_bucket[5m])) by (le))",
              "legendFormat": "P99 Latency"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "thresholds": {
                "steps": [
                  {"color": "green", "value": 0},
                  {"color": "yellow", "value": 500},
                  {"color": "red", "value": 1000}
                ]
              },
              "unit": "ms"
            }
          },
          "gridPos": {"h": 8, "w": 6, "x": 18, "y": 4}
        },
        {
          "id": 6,
          "title": "Service-to-Service Traffic",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(istio_request_total[5m])) by (source_app, destination_service_name)",
              "legendFormat": "{{source_app}} ‚Üí {{destination_service_name}}"
            }
          ],
          "yAxes": [
            {"label": "Requests/sec", "show": true},
            {"show": false}
          ],
          "gridPos": {"h": 8, "w": 12, "x": 0, "y": 12}
        },
        {
          "id": 7,
          "title": "Response Code Distribution",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(istio_request_total[5m])) by (response_code)",
              "legendFormat": "{{response_code}}"
            }
          ],
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 12}
        },
        {
          "id": 8,
          "title": "Service Latency Heatmap",
          "type": "heatmap",
          "targets": [
            {
              "expr": "sum(rate(istio_request_duration_milliseconds_bucket[5m])) by (le, destination_service_name)",
              "legendFormat": "{{destination_service_name}}"
            }
          ],
          "gridPos": {"h": 8, "w": 24, "x": 0, "y": 20}
        },
        {
          "id": 9,
          "title": "Top Services by Traffic",
          "type": "table",
          "targets": [
            {
              "expr": "topk(10, sum(rate(istio_request_total[5m])) by (destination_service_name))",
              "legendFormat": "{{destination_service_name}} RPS"
            }
          ],
          "gridPos": {"h": 8, "w": 8, "x": 0, "y": 28}
        },
        {
          "id": 10,
          "title": "Highest Error Rate Services",
          "type": "table",
          "targets": [
            {
              "expr": "topk(10, (sum(rate(istio_request_total{response_code=~\"5..\"}[5m])) by (destination_service_name) / sum(rate(istio_request_total[5m])) by (destination_service_name)) * 100)",
              "legendFormat": "{{destination_service_name}} error rate %"
            }
          ],
          "gridPos": {"h": 8, "w": 8, "x": 8, "y": 28}
        },
        {
          "id": 11,
          "title": "Slowest Services P99",
          "type": "table",
          "targets": [
            {
              "expr": "topk(10, histogram_quantile(0.99, sum(rate(istio_request_duration_milliseconds_bucket[5m])) by (destination_service_name, le)))",
              "legendFormat": "{{destination_service_name}} P99 ms"
            }
          ],
          "gridPos": {"h": 8, "w": 8, "x": 16, "y": 28}
        }
      ],
      "time": {"from": "now-1h", "to": "now"},
      "refresh": "30s"
    }
  folder: Istio
  resyncPeriod: 10m
