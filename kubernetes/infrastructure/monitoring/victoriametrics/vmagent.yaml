
# üîÑ VMAGENT - Metrics Collection (replaces Prometheus scraping)
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMAgent
metadata:
  name: vm-agent
  namespace: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "4"  # After VM Operator
  labels:
    app.kubernetes.io/name: vm-agent
    app.kubernetes.io/part-of: victoriametrics
spec:
  # üéØ RESOURCE ALLOCATION
  resources:
    requests:
      cpu: 200m
      memory: 300Mi
    limits:
      cpu: 500m
      memory: 512Mi

  # üì° REMOTE WRITE CONFIGURATION (to VMCluster)
  remoteWrite:
    - url: "http://vminsert-vm-cluster.monitoring.svc.cluster.local:8480/insert/0/prometheus/"

  # üîß AGENT CONFIGURATION
  scrapeInterval: "30s"  # Default scrape interval
  scrapeTimeout: "10s"   # Scrape timeout

  # üè∑Ô∏è EXTERNAL LABELS
  externalLabels:
    cluster: "homelab"
    replica: "vm-agent"

  # ‚ö° PERFORMANCE TUNING
  extraArgs:
    promscrape.maxScrapeSize: "16MB"    # Max response size
    remoteWrite.maxBlockSize: "8MB"     # Max block size for remote write
    memory.allowedPercent: "60"         # Memory usage limit

  # üîç AUTOMATIC PROMETHEUS-STYLE SERVICE DISCOVERY
  # ENABLED: Automatically discover services with prometheus.io/scrape=true
  selectAllByDefault: true

  # üéØ AUTOMATIC KUBERNETES SERVICE DISCOVERY
  # VMAgent automatically discovers services with annotation prometheus.io/scrape=true
  # Works exactly like Prometheus - no manual VMServiceScrape needed!

  # üåê SCRAPE ALL NAMESPACES - Full cluster observability
  serviceScrapeNamespaceSelector: {}  # Empty selector = ALL namespaces
  podScrapeNamespaceSelector: {}      # Empty selector = ALL namespaces

  # üéØ PROMETHEUS OPERATOR COMPATIBILITY
  # VMAgent can directly scrape Prometheus ServiceMonitors and PodMonitors
  # These are auto-converted internally by VictoriaMetrics operator

  # üåç COMPREHENSIVE KUBERNETES SERVICE DISCOVERY
  inlineScrapeConfig: |
    # üéØ KUBERNETES SERVICES (prometheus.io/scrape=true)
    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: replace
        target_label: kubernetes_port_name

    # üöÄ KUBERNETES PODS (prometheus.io/scrape=true)
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

    # ‚öôÔ∏è KUBERNETES API SERVER
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: false
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels:
          - __meta_kubernetes_namespace
          - __meta_kubernetes_service_name
          - __meta_kubernetes_endpoint_port_name
        action: keep
        regex: default;kubernetes;https

    # üîç KUBERNETES NODES (kubelet metrics)
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: false
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

    # üìä KUBERNETES CADVISOR (container metrics)
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      metrics_path: /metrics/cadvisor
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: false
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
