# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
prometheus:
  prometheusSpec:
    podMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    # nodeSelector:
    #   topology.kubernetes.io/zone: abel
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: rook-ceph-block-enterprise  # Use your correct storage class
          # volumeName: pv-prometheus  # Let Kubernetes auto-provision
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20G
        # selector:  # Remove specific PV selector, let Kubernetes handle it
        #   matchLabels:
        #     app: prometheus

# https://github.com/siderolabs/talos/discussions/7214
kubeControllerManager:
  enabled: true
  serviceMonitor:
    relabelings:
      - sourceLabels: [ __meta_kubernetes_pod_node_name ]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace
    metricRelabelings:
      - action: labeldrop
        regex: pod

kubeEtcd:
  enabled: true
  service:
    selector:
      # etcd doesn't run as a container,
      # but most probably runs on the same nodes that host a controller
      k8s-app: kube-controller-manager
  serviceMonitor:
    relabelings:
      - sourceLabels: [ __meta_kubernetes_pod_node_name ]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace
    metricRelabelings:
      - action: labeldrop
        regex: pod

kubeProxy:
  # Cilium replaces Kube Proxy
  enabled: false

kubeScheduler:
  enabled: true
  serviceMonitor:
    relabelings:
      - sourceLabels: [ __meta_kubernetes_pod_node_name ]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace
    metricRelabelings:
      - action: labeldrop
        regex: pod

nodeExporter:
  enabled: true

grafana:
  enabled: false
  forceDeployDatasources: false
  forceDeployDashboards: false
  defaultDashboardsEnabled: false
  defaultDashboardsTimezone: Europe/Berlin  # Fixed timezone for Germany
  operator:
    dashboardsConfigMapRefEnabled: true
    matchLabels:
      app: grafana
    folder: Kubernetes

prometheusOperator:
  admissionWebhooks:
    enabled: false  # Disable admission webhooks completely
    patch:
      enabled: false
    certManager:
      enabled: false
  # Disable TLS completely to avoid cert mount issues
  tls:
    enabled: false

# AlertManager Configuration - Slack Integration
alertmanager:
  alertmanagerSpec:
    secrets:
      - alertmanager-slack-webhooks
  config:
    global:
      resolve_timeout: 5m
    route:
      receiver: 'default'
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      routes:
        # P1-P2 Critical → #alerts-critical
        - matchers:
            - severity=~"critical"
            - priority=~"P1|P2"
          receiver: 'critical'
          group_wait: 10s
          group_interval: 1m
          repeat_interval: 15m
        # P1-P2 Critical (by tier) → #alerts-critical
        - matchers:
            - severity="critical"
            - tier="0"
          receiver: 'critical'
          group_wait: 10s
          group_interval: 1m
          repeat_interval: 15m
        # P3-P5 Warning/Info → #alerts-all
        - matchers:
            - severity=~"warning|info"
          receiver: 'all'
        # Watchdog → #alerts-all
        - matchers:
            - alertname="Watchdog"
          receiver: 'watchdog'
          repeat_interval: 5m
    receivers:
      - name: 'critical'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/critical
            channel: '#alerts-critical'
            title: '🚨 {{ .Status | toUpper }}: {{ .GroupLabels.alertname }}'
            title_link: 'http://prometheus.monitoring.svc:9090/alerts'
            text: |-
              {{ range .Alerts }}
              *━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
              *🔥 Alert:* `{{ .Labels.alertname }}`
              *📊 Severity:* `{{ .Labels.severity | toUpper }}`  |  *Priority:* `{{ .Labels.priority | default "P2" }}`
              *⏰ Started:* {{ .StartsAt.Format "15:04:05 MST" }}
              {{ if .Labels.namespace }}*📦 Namespace:* `{{ .Labels.namespace }}`{{ end }}
              {{ if .Labels.pod }}*🎯 Pod:* `{{ .Labels.pod }}`{{ end }}
              {{ if .Labels.container }}*📦 Container:* `{{ .Labels.container }}`{{ end }}
              {{ if .Labels.node }}*🖥️  Node:* `{{ .Labels.node }}`{{ end }}
              {{ if .Labels.instance }}*💻 Instance:* `{{ .Labels.instance }}`{{ end }}
              {{ if .Labels.job }}*⚙️  Job:* `{{ .Labels.job }}`{{ end }}
              {{ if .Labels.service }}*🔧 Service:* `{{ .Labels.service }}`{{ end }}
              {{ if .Annotations.summary }}
              *📝 Summary:*
              {{ .Annotations.summary }}
              {{ end }}
              {{ if .Annotations.description }}
              *📖 Description:*
              {{ .Annotations.description }}
              {{ end }}
              {{ if .Annotations.runbook_url }}
              *📚 Runbook:* {{ .Annotations.runbook_url }}
              {{ end }}
              *🔗 Source:* {{ .GeneratorURL }}
              {{ end }}
            color: 'danger'
            send_resolved: true
      - name: 'all'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/all
            channel: '#alerts-all'
            title: '{{ if eq .Status "firing" }}⚠️{{ else }}✅{{ end }} {{ .Status | toUpper }}: {{ .GroupLabels.alertname }}'
            title_link: 'http://prometheus.monitoring.svc:9090/alerts'
            text: |-
              {{ range .Alerts }}
              *━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*
              *Alert:* `{{ .Labels.alertname }}`
              *Severity:* `{{ .Labels.severity }}`  |  *Status:* `{{ .Status }}`
              *Started:* {{ .StartsAt.Format "15:04:05 MST" }}
              {{ if .Labels.namespace }}*Namespace:* `{{ .Labels.namespace }}`{{ end }}
              {{ if .Labels.pod }}*Pod:* `{{ .Labels.pod }}`{{ end }}
              {{ if .Labels.container }}*Container:* `{{ .Labels.container }}`{{ end }}
              {{ if .Labels.node }}*Node:* `{{ .Labels.node }}`{{ end }}
              {{ if .Labels.instance }}*Instance:* `{{ .Labels.instance }}`{{ end }}
              {{ if .Labels.job }}*Job:* `{{ .Labels.job }}`{{ end }}
              {{ if .Annotations.summary }}
              *Summary:* {{ .Annotations.summary }}
              {{ end }}
              {{ if .Annotations.description }}
              *Details:* {{ .Annotations.description }}
              {{ end }}
              {{ if .Annotations.runbook_url }}*Runbook:* {{ .Annotations.runbook_url }}{{ end }}
              {{ end }}
            color: '{{ if eq .Status "firing" }}warning{{ else }}good{{ end }}'
            send_resolved: true
      - name: 'watchdog'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/all
            channel: '#alerts-all'
            title: '💚 Watchdog Heartbeat - Monitoring Healthy'
            text: |-
              *System Status:* ✅ All monitoring systems operational
              *Timestamp:* {{ (index .Alerts 0).StartsAt.Format "15:04:05 MST" }}
              *Cluster:* {{ .CommonLabels.cluster | default "homelab" }}
            color: 'good'
            send_resolved: false
      - name: 'default'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/all
            channel: '#alerts-all'
            title: '🔔 {{ .GroupLabels.alertname }}'
            text: |-
              {{ range .Alerts }}
              *Alert:* {{ .Labels.alertname }}
              {{ if .Labels.namespace }}*Namespace:* {{ .Labels.namespace }}{{ end }}
              {{ if .Labels.pod }}*Pod:* {{ .Labels.pod }}{{ end }}
              {{ if .Annotations.summary }}*Summary:* {{ .Annotations.summary }}{{ end }}
              {{ end }}
