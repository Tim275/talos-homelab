# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
prometheus:
  prometheusSpec:
    podMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    # nodeSelector:
    #   topology.kubernetes.io/zone: abel
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: rook-ceph-block-enterprise  # Use your correct storage class
          # volumeName: pv-prometheus  # Let Kubernetes auto-provision
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20G
        # selector:  # Remove specific PV selector, let Kubernetes handle it
        #   matchLabels:
        #     app: prometheus

# https://github.com/siderolabs/talos/discussions/7214
kubeControllerManager:
  enabled: true
  serviceMonitor:
    relabelings:
      - sourceLabels: [ __meta_kubernetes_pod_node_name ]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace
    metricRelabelings:
      - action: labeldrop
        regex: pod

kubeEtcd:
  enabled: true
  service:
    selector:
      # etcd doesn't run as a container,
      # but most probably runs on the same nodes that host a controller
      k8s-app: kube-controller-manager
  serviceMonitor:
    relabelings:
      - sourceLabels: [ __meta_kubernetes_pod_node_name ]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace
    metricRelabelings:
      - action: labeldrop
        regex: pod

kubeProxy:
  # Cilium replaces Kube Proxy
  enabled: false

kubeScheduler:
  enabled: true
  serviceMonitor:
    relabelings:
      - sourceLabels: [ __meta_kubernetes_pod_node_name ]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace
    metricRelabelings:
      - action: labeldrop
        regex: pod

nodeExporter:
  enabled: true

grafana:
  enabled: false
  forceDeployDatasources: false
  forceDeployDashboards: false
  defaultDashboardsEnabled: false
  defaultDashboardsTimezone: Europe/Berlin  # Fixed timezone for Germany
  operator:
    dashboardsConfigMapRefEnabled: true
    matchLabels:
      app: grafana
    folder: Kubernetes

prometheusOperator:
  admissionWebhooks:
    enabled: false  # Disable admission webhooks completely
    patch:
      enabled: false
    certManager:
      enabled: false
  # Disable TLS completely to avoid cert mount issues
  tls:
    enabled: false

# AlertManager Configuration - Slack Integration
alertmanager:
  alertmanagerSpec:
    secrets:
      - alertmanager-slack-webhooks
  config:
    global:
      resolve_timeout: 5m
    route:
      receiver: 'default'
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      routes:
        # P1-P2 Critical ‚Üí #alerts-critical
        - matchers:
            - severity=~"critical"
            - priority=~"P1|P2"
          receiver: 'critical'
          group_wait: 10s
          group_interval: 1m
          repeat_interval: 15m
        # P1-P2 Critical (by tier) ‚Üí #alerts-critical
        - matchers:
            - severity="critical"
            - tier="0"
          receiver: 'critical'
          group_wait: 10s
          group_interval: 1m
          repeat_interval: 15m
        # P3-P5 Warning/Info ‚Üí #alerts-all
        - matchers:
            - severity=~"warning|info"
          receiver: 'all'
        # Watchdog ‚Üí #alerts-all
        - matchers:
            - alertname="Watchdog"
          receiver: 'watchdog'
          repeat_interval: 5m
    receivers:
      - name: 'critical'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/critical
            channel: '#alerts-critical'
            title: 'üö® CRITICAL: {{ .GroupLabels.alertname }}'
            text: |-
              {{ range .Alerts }}
              *Alert:* {{ .Labels.alertname }}
              *Severity:* {{ .Labels.severity }}
              *Priority:* {{ .Labels.priority }}
              *Summary:* {{ .Annotations.summary }}
              *Description:* {{ .Annotations.description }}
              {{ end }}
            color: 'danger'
            send_resolved: true
      - name: 'all'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/all
            channel: '#alerts-all'
            title: '‚ö†Ô∏è {{ .GroupLabels.severity | toUpper }}: {{ .GroupLabels.alertname }}'
            text: |-
              {{ range .Alerts }}
              *Alert:* {{ .Labels.alertname }}
              *Severity:* {{ .Labels.severity }}
              *Summary:* {{ .Annotations.summary }}
              {{ end }}
            color: 'warning'
            send_resolved: true
      - name: 'watchdog'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/all
            channel: '#alerts-all'
            title: 'üíö Watchdog Heartbeat'
            text: 'Monitoring system is healthy'
            color: 'good'
            send_resolved: false
      - name: 'default'
        slack_configs:
          - api_url_file: /etc/alertmanager/secrets/alertmanager-slack-webhooks/all
            channel: '#alerts-all'
            title: 'Alert: {{ .GroupLabels.alertname }}'
