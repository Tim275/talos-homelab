# 🎯 ENTERPRISE BOOTSTRAP PATTERN - 2-STEP CONTROL
# ===============================================
# STEP 1: BOOTSTRAP - kubectl apply -k infrastructure/
#         Deploys ONLY Projects + ApplicationSets (no individual services)
#         Fast bootstrap without waiting for Helm charts
#
# STEP 2: GRANULAR CONTROL - Comment/Uncomment in ApplicationSet files
#         Edit controllers-app.yaml, network-app.yaml, monitoring-app.yaml
#         Individual services ein/ausschalten nach Bootstrap
#
# RESULT: Every service visible as individual Application in ArgoCD UI!

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

labels:
  - pairs:
      app.kubernetes.io/managed-by: argocd
      enterprise.tier: infrastructure
      enterprise.pattern: triple-level-control-2025
      team: timour

# 🌊 Sync Wave 1: Infrastructure Foundation Layer
commonAnnotations:
  argocd.argoproj.io/sync-wave: "1"

resources:
  # 🏛️ INFRASTRUCTURE PROJECT
  - project.yaml

  # 🎛️ LEVEL 1: DOMAIN CONTROL - Comment/Uncomment for extreme scenarios
  # ====================================================================

  # 🎯 ENTERPRISE GITILES PATTERN - Pure Kustomize Control
  # ======================================================
  # Comment/Uncomment individual services for TRUE control

  # 🎯 ENTERPRISE BOOTSTRAP - ApplicationSets only (no individual services)
  # Individual services are managed by ApplicationSets after bootstrap

  # 🎛️ CONTROLLERS ApplicationSet
  - controllers-app.yaml               # ApplicationSet for all controllers

  # 🌐 NETWORK ApplicationSet
  - network-app.yaml                   # ApplicationSet for network services

  # 💾 STORAGE ApplicationSet
  - storage-app.yaml                   # ApplicationSet for storage services

  # 📊 MONITORING ApplicationSet
  - monitoring-app.yaml                # ApplicationSet for monitoring stack

  # 🔍 OBSERVABILITY ApplicationSet
  - observability-app.yaml             # ApplicationSet for observability stack

  # 🔐 VPN Documentation (Tailscale - no K8s deployment needed)
  # VPN infrastructure switched to Tailscale (client-only)
  # See kubernetes/infrastructure/vpn/README.md for setup

  # 📊 DIRECT APPLICATIONS
  # - monitoring/kube-prometheus-stack/application.yaml  # ❌ DISABLED: Back to kustomize pattern

  # ❌ DISABLED DOMAINS - Uncomment when needed
  # - backup-app.yaml         # ❌ DISABLED - Backup domain not implemented yet

# 🎯 3-LEVEL CONTROL EXAMPLES:
#
# 🔧 NORMAL DAY-TO-DAY USE (Level 2 - Service Control):
# - Want to disable prometheus? → Comment it in monitoring-app.yaml
# - Want to disable vector? → Comment it in observability-app.yaml
# - Want to disable jaeger? → Comment it in monitoring-app.yaml
#
# 🛠️ FINE-GRAINED CONTROL (Level 3 - Component Control):
# - Want to disable prometheus alerting? → Comment alerting-rules.yaml in prometheus/kustomization.yaml
# - Want to disable grafana dashboards? → Comment dashboards/ in grafana/kustomization.yaml
#
# 🚨 EXTREME SCENARIOS (Level 1 - Domain Control):
# - Testing: Comment monitoring-app.yaml → ALL monitoring services disabled
# - Migration: Comment storage-app.yaml → ALL storage services disabled
# - Debugging: Comment observability-app.yaml → ALL observability services disabled
