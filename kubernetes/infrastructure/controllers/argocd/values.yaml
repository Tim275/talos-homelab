# ðŸš€ ENTERPRISE ARGOCD CONFIGURATION - ULTRA OPTIMIZED FOR PERFORMANCE
# ========================================================================
# Based on 2025 best practices for managing 10,000+ applications
# Optimized for homelab â†’ enterprise scaling path

configs:
  cm:
    create: true
    application.resourceTrackingMethod: annotation+label
    admin.enabled: true
    url: https://argo.timourhomelab.org
    # Enable Helm support in Kustomize for all applications
    kustomize.buildOptions: --enable-helm
    # ðŸš€ PERFORMANCE: Optimized timeout and reconciliation settings
    timeout.reconciliation: "360s"        # Extended from 180s default
    timeout.reconciliation.jitter: "30s"   # Add jitter to prevent thundering herd
    timeout.hard.reconciliation: "600s"    # Hard limit for reconciliation

  cmp:
    create: true
    plugins:
      kustomize-build-with-helm:
        generate:
          command: [ sh, -c ]
          args: [ kustomize build --enable-helm ]

  params:
    controller.diff.server.side: true
    server.insecure: true
    server.grpc.web: true
    # ðŸ”§ 2025 ENTERPRISE FIX: Globally disable orphaned resources warnings
    controller.ignore.orphaned.resources: true
    application.resource-tracking-method: annotation+label

    # ðŸš€ ENTERPRISE PERFORMANCE TUNING - 2025 OPTIMIZATIONS
    # =====================================================
    # Timeouts (Extended for large repositories and Helm charts)
    controller.repo.server.timeout.seconds: "600"    # Increased from 300s
    server.repo.server.timeout.seconds: "600"        # Match controller timeout
    controller.operation.processors: "25"            # Optimized for 1000+ apps
    controller.status.processors: "50"               # Optimized for 1000+ apps

    # Kubernetes API Performance Tuning
    controller.kubectl.parallelism.limit: "20"       # Prevent API server overload
    controller.k8s.client.qps: "50"                  # API request rate limit
    controller.k8s.client.burst: "100"               # API burst rate limit

    # Repository and Cache Performance
    reposerver.parallelism.limit: "10"               # Increased from 1 for better throughput
    repo.cache.expiration: "1h"                      # Reduced from 24h for faster updates
    controller.cache.default.expiration: "60m"       # Cache optimization

    # Git Operations Optimization
    controller.git.attempts.count: "3"               # Retry failed git operations
    controller.enable.proxy.extension: "false"       # Disable if not needed

    # Application Sync Optimization
    application.sync.wave.delay: "2"                 # Seconds between sync waves
    application.operation.retry.backoff.duration: "5s"  # Retry backoff
    application.operation.retry.backoff.factor: "2"     # Exponential backoff
    application.operation.retry.backoff.maxDuration: "3m" # Max retry wait

crds:
  install: true
  keep: false

controller:
  # ðŸš€ ENTERPRISE SCALING CONFIGURATION
  replicas: 1  # Homelab scale - single controller for bootstrap

  resources:
    requests:
      cpu: 100m      # Homelab scale - reduced for bootstrap
      memory: 512Mi  # Homelab scale - reduced memory
    limits:
      cpu: 1000m     # Homelab scale - reduced CPU limit
      memory: 2Gi    # Homelab scale - reduced memory limit

  # ðŸš€ ADVANCED PERFORMANCE METRICS
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: argocd
      additionalLabels:
        release: prometheus-operator  # Ensure Prometheus discovery
      interval: 30s
      scrapeTimeout: 10s

  # ðŸš€ ENTERPRISE ENVIRONMENT VARIABLES
  extraEnv:
    # Execution and Timeout Configuration
    - name: ARGOCD_EXEC_TIMEOUT
      value: "600"                           # Increased for complex operations
    - name: ARGOCD_RECONCILIATION_TIMEOUT
      value: "600"                           # Extended reconciliation timeout
    - name: ARGOCD_HARD_RECONCILIATION_TIMEOUT
      value: "900"                           # Hard limit

    # Kubernetes API Client Optimization
    - name: ARGOCD_K8S_CLIENT_QPS
      value: "50"                            # High QPS for performance
    - name: ARGOCD_K8S_CLIENT_BURST
      value: "100"                           # Burst capacity

    # Git and Repository Optimization
    - name: ARGOCD_GIT_ATTEMPTS_COUNT
      value: "3"                             # Retry failed git operations
    - name: ARGOCD_GIT_RETRY_DURATION
      value: "1s"                            # Git retry interval

    # Controller Sharding Preparation (for future scaling)
    - name: ARGOCD_CONTROLLER_REPLICAS
      value: "2"                             # Match replica count

    # Memory and Performance Tuning
    - name: GOGC
      value: "80"                            # Aggressive garbage collection
    - name: GOMEMLIMIT
      value: "3GiB"                          # Go memory limit
  # Prefer nodes that are NOT work-00 or work-02 (i5 server)
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
              - key: kubernetes.io/hostname
                operator: NotIn
                values:
                  - work-00
                  - work-02

dex:
  enabled: false
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      memory: 128Mi

redis:
  # ðŸš€ ENTERPRISE REDIS CONFIGURATION
  # Redis is critical for ArgoCD performance - optimize for caching
  resources:
    requests:
      cpu: 100m      # Increased for better performance
      memory: 256Mi  # Larger cache capacity
    limits:
      cpu: 500m      # Allow burst for cache operations
      memory: 1Gi    # Enterprise cache size

  # ðŸš€ REDIS PERFORMANCE TUNING
  extraArgs:
    - --maxmemory-policy
    - allkeys-lru    # Optimize memory usage with LRU eviction
    - --save
    - ""             # Disable persistence for cache-only usage
    - --appendonly
    - "no"           # Disable AOF for cache performance

  # ðŸš€ REDIS METRICS
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: argocd
      additionalLabels:
        release: prometheus-operator

  # ðŸš€ REDIS HA CONFIGURATION (when needed)
  haproxy:
    enabled: true  # Enable for production HA setup
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 200m
        memory: 256Mi

server:
  # ðŸš€ HIGH AVAILABILITY SERVER CONFIGURATION
  replicas: 1  # Homelab scale - single server for bootstrap

  service:
    type: ClusterIP  # No LoadBalancer - use Ingress instead
    # loadBalancerIP: "192.168.68.160"  # Disabled - no LoadBalancer
    servicePortHttpsAppProtocol: kubernetes.io/h2c

  # ðŸš€ ENHANCED METRICS AND MONITORING
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: argocd
      additionalLabels:
        release: prometheus-operator
      interval: 30s
      scrapeTimeout: 10s

  certificate:
    enabled: false  # Disabled until cert-manager is deployed
    domain: argo.timourhomelab.org
    issuer:
      group: cert-manager.io
      kind: ClusterIssuer
      name: cloudflare-cluster-issuer
    privateKey:
      algorithm: ECDSA
      size: 256

  resources:
    requests:
      cpu: 100m      # Homelab scale - reduced for bootstrap
      memory: 128Mi  # Homelab scale - reduced memory
    limits:
      cpu: 500m      # Homelab scale - reduced CPU limit
      memory: 1Gi    # Homelab scale - reduced memory limit

  # ðŸš€ SERVER PERFORMANCE TUNING
  extraEnv:
    - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
      value: "600"     # Match repo server timeout
    - name: ARGOCD_SERVER_INSECURE
      value: "true"    # Already configured via params

  # ðŸš€ INGRESS DISABLED - Using kubectl port-forward instead
  ingress:
    enabled: false  # Disabled per user request - use kubectl port-forward

repoServer:
  # ðŸš€ ENTERPRISE REPO SERVER - ULTRA PERFORMANCE CONFIG
  replicas: 1  # Homelab scale - single replica for bootstrap

  containerSecurityContext:
    readOnlyRootFilesystem: true

  # ðŸš€ PERSISTENT VOLUME CONFIGURATION FOR ENTERPRISE CACHING
  volumes:
    - name: cmp-kustomize-build-with-helm
      configMap:
        name: argocd-cmp-cm
    - name: cmp-tmp
      emptyDir:
        sizeLimit: 2Gi  # Limit tmp space
    # ðŸš€ EMPTYDIR CACHE FOR BOOTSTRAP (no PVC dependency)
    - name: repo-cache
      emptyDir:
        sizeLimit: 5Gi
    # ðŸš€ ADDITIONAL TMP SPACE FOR LARGE REPOSITORIES
    - name: repo-tmp
      emptyDir:
        sizeLimit: 5Gi
        medium: Memory  # In-memory for speed

  volumeMounts:
    - name: repo-cache
      mountPath: /repo-cache      # Custom cache directory
    - name: repo-tmp
      mountPath: /repo-tmp        # Fix: use unique mount path

  # ðŸš€ ADVANCED METRICS AND MONITORING
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: argocd
      additionalLabels:
        release: prometheus-operator
      interval: 30s
      scrapeTimeout: 10s

  # ðŸš€ ENTERPRISE RESOURCE ALLOCATION
  resources:
    requests:
      cpu: 100m      # Homelab scale - reduced for bootstrap
      memory: 256Mi  # Homelab scale - reduced memory
    limits:
      cpu: 500m      # Homelab scale - reduced CPU limit
      memory: 1Gi    # Homelab scale - reduced memory limit

  # ðŸš€ REPO SERVER PERFORMANCE ENVIRONMENT VARIABLES
  extraEnv:
    # Cache and Performance
    - name: TMPDIR
      value: "/repo-tmp"                   # Fix: match updated mount path
    - name: ARGOCD_EXEC_TIMEOUT
      value: "600"                         # Extended execution timeout
    - name: ARGOCD_GIT_ATTEMPTS_COUNT
      value: "3"                           # Git retry count
    - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
      value: "10"                          # Parallel manifest generation

    # Go Runtime Optimization
    - name: GOGC
      value: "80"                          # Aggressive GC for memory efficiency
    - name: GOMEMLIMIT
      value: "3GiB"                        # Go memory limit

    # Git Configuration
    - name: GIT_CONFIG_GLOBAL
      value: "/repo-cache/.gitconfig"      # Custom git config location

    # Repository Cache Configuration
    - name: ARGOCD_REPO_CACHE_EXPIRATION
      value: "1h"                          # Faster cache invalidation

  # ðŸš€ DISABLED PERSISTENT CACHE FOR BOOTSTRAP (can enable later)
  persistence:
    enabled: false  # Disable for bootstrap - use emptyDir
    size: 20Gi
    storageClassName: rook-cephblock-enterprise
    accessModes:
      - ReadWriteOnce
  extraContainers:
    - name: kustomize-build-with-helm
      command:
        - argocd-cmp-server
      image: >-
        {{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{
        default (include "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop: [ ALL ]
      volumeMounts:
        - name: plugins
          mountPath: /home/argocd/cmp-server/plugins
        - name: cmp-kustomize-build-with-helm
          mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: kustomize-build-with-helm.yaml
        - mountPath: /tmp
          name: cmp-tmp
  # Also avoid i5 server nodes
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
              - key: kubernetes.io/hostname
                operator: NotIn
                values:
                  - work-00
                  - work-02

applicationSet:
  # ðŸš€ ENTERPRISE APPLICATIONSET CONTROLLER
  replicas: 2  # HA configuration

  resources:
    requests:
      cpu: 200m      # Increased for processing many ApplicationSets
      memory: 256Mi  # Higher baseline
    limits:
      cpu: 1000m     # Allow burst processing
      memory: 2Gi    # Enterprise memory allocation

  # ðŸš€ APPLICATIONSET PERFORMANCE TUNING
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: argocd
      additionalLabels:
        release: prometheus-operator

  extraEnv:
    # Removed duplicate REPO_SERVER_TIMEOUT - already in configs.params
    - name: ARGOCD_APPLICATIONSET_CONTROLLER_PARALLELISM_LIMIT
      value: "10"      # Process multiple ApplicationSets in parallel

notifications:
  enabled: false
