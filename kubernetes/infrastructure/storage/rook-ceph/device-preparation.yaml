
# Enterprise Device Preparation Job for Talos Nodes
# This DaemonSet ensures all storage devices are properly prepared for Rook-Ceph
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: rook-ceph-device-preparation
  namespace: rook-ceph
  labels:
    app: rook-ceph-device-preparation
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  selector:
    matchLabels:
      app: rook-ceph-device-preparation
  template:
    metadata:
      labels:
        app: rook-ceph-device-preparation
    spec:
      hostNetwork: true
      hostPID: true
      priorityClassName: system-node-critical
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      nodeSelector:
        # Only run on nodes that should have Ceph OSDs
        node.kubernetes.io/instance-type: worker
      containers:
        - name: device-prep
          image: quay.io/ceph/ceph:v20.1.0
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "=== Rook-Ceph Enterprise Device Preparation ==="
              echo "Node: $(hostname)"
              echo "Date: $(date)"

              # Check if running on Talos
              if [ -f /proc/version ] && grep -q "Talos" /proc/version; then
                echo "‚úì Detected Talos Linux"
              else
                echo "‚ö† Not running on Talos Linux - proceeding anyway"
              fi

              # Define storage devices for each node type
              STORAGE_DEVICE="/dev/sdb"

              echo "=== Checking Storage Device: $STORAGE_DEVICE ==="

              if [ -b "$STORAGE_DEVICE" ]; then
                echo "‚úì Storage device $STORAGE_DEVICE found"

                # Check device size
                DEVICE_SIZE=$(lsblk -b --output SIZE -n -d $STORAGE_DEVICE)
                echo "Device size: $(numfmt --to=iec $DEVICE_SIZE)"

                # Check if device is already in use
                if lsblk $STORAGE_DEVICE | grep -q "part\|lvm\|crypt"; then
                  echo "‚ö† Device $STORAGE_DEVICE appears to be in use:"
                  lsblk $STORAGE_DEVICE
                else
                  echo "‚úì Device $STORAGE_DEVICE is available for Ceph"
                fi

                # Verify device is writable (read-only test)
                if [ -w "$STORAGE_DEVICE" ]; then
                  echo "‚úì Device $STORAGE_DEVICE is writable"
                else
                  echo "‚ö† Device $STORAGE_DEVICE is not writable - check permissions"
                fi

                # Clean device metadata if requested
                if [ "$CLEAN_DEVICE" = "true" ]; then
                  echo "üßπ Cleaning device metadata..."
                  wipefs -a $STORAGE_DEVICE || echo "‚ö† Failed to wipe filesystem signatures"
                  dd if=/dev/zero of=$STORAGE_DEVICE bs=1M count=100 2>/dev/null || echo "‚ö† Failed to zero device start"
                  sgdisk --zap-all $STORAGE_DEVICE || echo "‚ö† Failed to zap GPT"
                  partprobe $STORAGE_DEVICE || echo "‚ö† Failed to update partition table"
                  echo "‚úì Device cleaned"
                fi

              else
                echo "‚ùå Storage device $STORAGE_DEVICE not found"
                echo "Available block devices:"
                lsblk
                exit 1
              fi

              echo "=== System Information ==="
              echo "Kernel: $(uname -r)"
              echo "Available memory: $(free -h | grep '^Mem:' | awk '{print $7}')"
              echo "CPU cores: $(nproc)"

              echo "=== Ceph Prerequisites Check ==="

              # Check for required kernel modules
              REQUIRED_MODULES="rbd libceph"
              for module in $REQUIRED_MODULES; do
                if modprobe $module 2>/dev/null; then
                  echo "‚úì Kernel module $module loaded"
                else
                  echo "‚ö† Failed to load kernel module $module"
                fi
              done

              # Check for ceph-common tools in container
              echo "=== Ceph Tools Check ==="
              which ceph && echo "‚úì ceph command available" || echo "‚ùå ceph command not found"
              which rados && echo "‚úì rados command available" || echo "‚ùå rados command not found"
              which rbd && echo "‚úì rbd command available" || echo "‚ùå rbd command not found"

              echo "=== Device Preparation Complete ==="
              echo "Node $(hostname) is ready for Rook-Ceph deployment"

              # Sleep to keep the pod running for debugging if needed
              if [ "$DEBUG_MODE" = "true" ]; then
                echo "Debug mode enabled - keeping pod running..."
                sleep infinity
              else
                echo "Exiting successfully"
                sleep 30  # Give time for logs to be collected
              fi

          securityContext:
            privileged: true
          env:
            # Set to "true" to clean devices (DANGEROUS - will erase data!)
            - name: CLEAN_DEVICE
              value: "false"
            # Set to "true" to keep pods running for debugging
            - name: DEBUG_MODE
              value: "false"
          volumeMounts:
            - name: dev
              mountPath: /dev
            - name: sys
              mountPath: /sys
            - name: proc
              mountPath: /proc
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"
      volumes:
        - name: dev
          hostPath:
            path: /dev
        - name: sys
          hostPath:
            path: /sys
        - name: proc
          hostPath:
            path: /proc
      restartPolicy: Always
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
