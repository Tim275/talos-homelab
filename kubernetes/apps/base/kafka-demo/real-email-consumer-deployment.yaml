apiVersion: apps/v1
kind: Deployment
metadata:
  name: real-email-notification-consumer
  namespace: kafka-demo
  labels:
    app.kubernetes.io/name: real-email-notification-consumer
    app.kubernetes.io/part-of: kafka-demo
    app.kubernetes.io/component: consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: real-email-notification-consumer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: real-email-notification-consumer
        app.kubernetes.io/part-of: kafka-demo
        app.kubernetes.io/component: consumer
    spec:
      containers:
      - name: consumer
        image: python:3.11-slim
        command:
        - /bin/bash
        - -c
        args:
        - |
          # Install required packages (smtplib and email modules are built-in)
          pip install kafka-python

          # Create app directory and Python email consumer script
          mkdir -p /app
          cat > /app/email_consumer.py << 'EOF'
          import json
          import smtplib
          import logging
          import os
          import time
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from kafka import KafkaConsumer, KafkaProducer
          from datetime import datetime

          # Configure logging
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
          logger = logging.getLogger(__name__)

          # SMTP Configuration from environment
          SMTP_HOST = os.getenv('SMTP_HOST', 'smtp.gmail.com')
          SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
          SMTP_USERNAME = os.getenv('SMTP_USERNAME')
          SMTP_PASSWORD = os.getenv('SMTP_PASSWORD')
          SMTP_FROM = os.getenv('SMTP_FROM')
          # Note: SMTP_TO is no longer used - emails go to actual user email addresses

          # Kafka Configuration
          KAFKA_BROKERS = os.getenv('KAFKA_BROKERS', 'my-cluster-kafka-bootstrap.kafka:9092').split(',')
          INPUT_TOPIC = os.getenv('INPUT_TOPIC', 'user-registrations')
          OUTPUT_TOPIC = os.getenv('OUTPUT_TOPIC', 'email-notifications')
          CONSUMER_GROUP = os.getenv('CONSUMER_GROUP', 'real-email-notification-group')

          def send_email(user_data):
              """Send real email notification to the actual user who registered"""
              try:
                  # Extract user information
                  user_id = user_data.get('user_id', 'unknown')
                  user_email = user_data.get('email', 'unknown@example.com')
                  timestamp = user_data.get('timestamp', datetime.utcnow().isoformat())
                  region = user_data.get('region', 'unknown')

                  # Validate email address
                  if not user_email or user_email == 'unknown@example.com':
                      logger.warning(f"⚠️ Invalid email address for user {user_id}: {user_email}")
                      return {"status": "failed", "error": "Invalid email address"}

                  # Create welcome email content for the new user
                  subject = f"🎉 Welcome to our platform, {user_id}!"

                  html_body = f"""
                  <html>
                    <body style="font-family: Arial, sans-serif;">
                      <h2 style="color: #4CAF50;">Welcome to our platform!</h2>
                      <p>Hi <strong>{user_id}</strong>,</p>
                      <p>Thank you for registering with us! Your account has been successfully created.</p>
                      <div style="background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin: 20px 0;">
                        <h3 style="color: #333; margin-top: 0;">Registration Details:</h3>
                        <p><strong>User ID:</strong> {user_id}</p>
                        <p><strong>Email:</strong> {user_email}</p>
                        <p><strong>Registration Time:</strong> {timestamp}</p>
                        <p><strong>Region:</strong> {region}</p>
                      </div>
                      <p>You can now start using our services. If you have any questions, feel free to contact our support team.</p>
                      <p style="color: #666; font-size: 12px; margin-top: 30px;">
                        This email was automatically generated by our Kafka-powered notification system.<br>
                        Homelab Kubernetes Platform - Real-time Event Processing
                      </p>
                    </body>
                  </html>
                  """

                  text_body = f"""
                  Welcome to our platform!

                  Hi {user_id},

                  Thank you for registering with us! Your account has been successfully created.

                  Registration Details:
                  - User ID: {user_id}
                  - Email: {user_email}
                  - Registration Time: {timestamp}
                  - Region: {region}

                  You can now start using our services. If you have any questions, feel free to contact our support team.

                  This email was automatically generated by our Kafka-powered notification system.
                  Homelab Kubernetes Platform - Real-time Event Processing
                  """

                  # Create message
                  msg = MIMEMultipart('alternative')
                  msg['Subject'] = subject
                  msg['From'] = SMTP_FROM
                  msg['To'] = user_email

                  # Attach both text and HTML versions
                  msg.attach(MIMEText(text_body, 'plain'))
                  msg.attach(MIMEText(html_body, 'html'))

                  # Send email
                  server = smtplib.SMTP(SMTP_HOST, SMTP_PORT)
                  server.starttls()
                  server.login(SMTP_USERNAME, SMTP_PASSWORD)
                  text = msg.as_string()
                  server.sendmail(SMTP_FROM, user_email, text)
                  server.quit()

                  logger.info(f"✅ Real email sent successfully for user {user_id} to {user_email}")
                  return {"status": "sent", "recipient": user_email}

              except Exception as e:
                  logger.error(f"❌ Failed to send email for user {user_id}: {str(e)}")
                  return {"status": "failed", "error": str(e)}

          def main():
              logger.info("🚀 Starting Real Email Notification Consumer...")
              logger.info(f"📧 SMTP Config: {SMTP_HOST}:{SMTP_PORT} (from: {SMTP_FROM})")
              logger.info(f"📨 Kafka Config: {KAFKA_BROKERS} (topic: {INPUT_TOPIC} -> {OUTPUT_TOPIC})")

              # Wait for Kafka to be ready
              time.sleep(35)

              # Initialize Kafka consumer and producer
              consumer = KafkaConsumer(
                  INPUT_TOPIC,
                  bootstrap_servers=KAFKA_BROKERS,
                  group_id=CONSUMER_GROUP,
                  value_deserializer=lambda x: json.loads(x.decode('utf-8')) if x else None,
                  auto_offset_reset='latest'  # Start from latest to avoid processing old messages
              )

              producer = KafkaProducer(
                  bootstrap_servers=KAFKA_BROKERS,
                  value_serializer=lambda x: json.dumps(x).encode('utf-8')
              )

              logger.info("📱 Consumer ready, waiting for user registration messages...")

              for message in consumer:
                  try:
                      if message.value:
                          logger.info(f"📥 Received registration: {message.value}")

                          # Send real email
                          email_result = send_email(message.value)

                          # Create notification event
                          notification = {
                              "email_id": f"real-email-{int(time.time() * 1000)}",
                              "user_id": message.value.get('user_id', 'unknown'),
                              "recipient": email_result.get('recipient', message.value.get('email', 'unknown')),
                              "status": email_result.get('status', 'unknown'),
                              "timestamp": datetime.utcnow().isoformat() + 'Z',
                              "event_type": "real_email_notification",
                              "smtp_host": SMTP_HOST,
                              "error": email_result.get('error')
                          }

                          # Produce notification to Kafka
                          producer.send(OUTPUT_TOPIC, notification)
                          producer.flush()

                          logger.info(f"📬 Notification event published: {notification['email_id']}")

                  except Exception as e:
                      logger.error(f"💥 Error processing message: {str(e)}")
                      continue

          if __name__ == "__main__":
              main()
          EOF

          # Run the email consumer
          python /app/email_consumer.py
        env:
        - name: KAFKA_BROKERS
          value: "my-cluster-kafka-bootstrap.kafka:9092"
        - name: INPUT_TOPIC
          value: "user-registrations"
        - name: OUTPUT_TOPIC
          value: "email-notifications"
        - name: CONSUMER_GROUP
          value: "real-email-notification-group"
        # SMTP Configuration from Secret
        - name: SMTP_HOST
          valueFrom:
            secretKeyRef:
              name: smtp-config
              key: smtp_host
        - name: SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: smtp-config
              key: smtp_port
        - name: SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              name: smtp-config
              key: smtp_username
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smtp-config
              key: smtp_password
        - name: SMTP_FROM
          valueFrom:
            secretKeyRef:
              name: smtp-config
              key: smtp_from
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"