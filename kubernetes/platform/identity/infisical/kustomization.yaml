apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# Infisical - Modern Secrets Management Platform
# Purpose: Central secrets management with PostgreSQL + Redis
# Bootstrap: SealedSecrets (encrypted) → Infisical (runtime)

resources:
  - namespace.yaml
  # Single SealedSecret with ALL Infisical configuration
  - infisical-secrets-sealed.yaml
  # External Infrastructure (CloudNativePG + Redis Operator)
  - postgres-cluster.yaml
  - redis.yaml
  - infisical-config.yaml

namespace: infisical

commonLabels:
  app.kubernetes.io/name: infisical
  app.kubernetes.io/component: secrets-management
  app.kubernetes.io/part-of: platform-identity

commonAnnotations:
  argocd.argoproj.io/sync-wave: "17"

helmCharts:
  - name: infisical-standalone
    repo: https://dl.cloudsmith.io/public/infisical/helm-charts/helm/charts/
    version: "1.7.1"
    releaseName: infisical
    namespace: infisical
    # ✅ USE valuesInline (NOT valuesFile - ArgoCD doesn't support it!)
    valuesInline:
      # Disable bundled dependencies (we use external PostgreSQL/Redis)
      postgresql:
        enabled: false

      redis:
        enabled: false

      ingress:
        enabled: false
        nginx:
          enabled: false

      # Infisical Application Configuration
      infisical:
        enabled: true
        name: infisical
        fullnameOverride: infisical
        replicaCount: 1  # Minimal config

        autoDatabaseSchemaMigration: true

        # ✅ CRITICAL: Reference to SealedSecret containing ALL config
        kubeSecretRef: "infisical-secrets"

        image:
          repository: infisical/infisical
          tag: "v0.93.1-postgres"
          pullPolicy: IfNotPresent

        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "8080"

        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

        service:
          type: ClusterIP
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "8080"
