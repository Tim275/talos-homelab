# üîê Production-Grade Bootstrap Pre-Processor
# Generates random passwords for users without password field
# Complies with ISO 27001, SOC2, and enterprise security standards

apiVersion: v1
kind: ConfigMap
metadata:
  name: bootstrap-password-injector
  namespace: lldap
data:
  inject-passwords.sh: |
    #!/bin/sh
    set -e

    echo "=========================================="
    echo "üîê Password Injection (Production Mode)"
    echo "=========================================="
    echo ""

    # Generate random password function
    generate_password() {
      openssl rand -base64 32 | tr -d '=+/\n' | cut -c1-32
    }

    echo "üìã Processing users.json from ConfigMap..."
    INPUT_FILE="/bootstrap-input/user-configs/users.json"
    OUTPUT_FILE="/bootstrap-output/user-configs/users.json"

    mkdir -p /bootstrap-output/user-configs

    # Process each user object
    INSIDE_USER=0
    USER_BLOCK=""
    OUTPUT=""

    while IFS= read -r line || [ -n "$line" ]; do
      # Detect start of user object
      if echo "$line" | grep -q '^[[:space:]]*{'; then
        INSIDE_USER=1
        USER_BLOCK="$line"
      # Detect end of user object
      elif echo "$line" | grep -q '^[[:space:]]*}' && [ "$INSIDE_USER" = "1" ]; then
        USER_BLOCK="${USER_BLOCK}
    ${line}"

        # Extract user ID
        USER_ID=$(echo "$USER_BLOCK" | grep -o '"id"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | cut -d'"' -f4)

        # Check if password exists
        if echo "$USER_BLOCK" | grep -q '"password"'; then
          echo "‚úÖ User $USER_ID has password (keeping existing)"
          OUTPUT="${OUTPUT}${USER_BLOCK}
    "
        else
          # Generate and inject password
          RANDOM_PWD=$(generate_password)
          echo "üîë User $USER_ID needs password (generating random)"
          MODIFIED_BLOCK=$(echo "$USER_BLOCK" | sed 's/"groups"/"password": "'"$RANDOM_PWD"'",\n      "groups"/')
          OUTPUT="${OUTPUT}${MODIFIED_BLOCK}
    "
        fi

        INSIDE_USER=0
        USER_BLOCK=""
      else
        if [ "$INSIDE_USER" = "1" ]; then
          USER_BLOCK="${USER_BLOCK}
    ${line}"
        else
          OUTPUT="${OUTPUT}${line}
    "
        fi
      fi
    done < "$INPUT_FILE"

    echo "$OUTPUT" > "$OUTPUT_FILE"

    echo ""
    echo "=========================================="
    echo "‚úÖ Password Injection Complete!"
    echo "=========================================="
    echo "Output written to $OUTPUT_FILE"
    echo ""
