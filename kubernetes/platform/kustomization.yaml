# 🎯 ENTERPRISE BOOTSTRAP PATTERN - 2-STEP CONTROL
# ===============================================
# STEP 1: BOOTSTRAP - kubectl apply -k platform/
#         Deploys ONLY Projects + ApplicationSets (no individual services)
#         Fast bootstrap without waiting for Helm charts
#
# STEP 2: GRANULAR CONTROL - Comment/Uncomment in ApplicationSet files
#         Edit data-app.yaml, messaging-app.yaml, identity-app.yaml
#         Individual services ein/ausschalten nach Bootstrap
#
# RESULT: Every platform service visible as individual Application in ArgoCD UI!

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

labels:
  - pairs:
      app.kubernetes.io/managed-by: argocd
      enterprise.tier: platform
      enterprise.pattern: triple-level-control-2025
      team: timour

# 🌊 Sync Wave 15: Platform Layer (After Infrastructure)
commonAnnotations:
  argocd.argoproj.io/sync-wave: "15"

resources:
  # 🏛️ PLATFORM PROJECT
  - project.yaml

  # 🎛️ LEVEL 1: DOMAIN CONTROL - Comment/Uncomment for extreme scenarios
  # ====================================================================

  # 🎯 ENTERPRISE GITILES PATTERN - Pure Kustomize Control
  # ======================================================
  # Comment/Uncomment individual services for TRUE control

  # 🎯 ENTERPRISE BOOTSTRAP - ApplicationSets only (no individual services)
  # Individual services are managed by ApplicationSets after bootstrap

  # 💾 DATA ApplicationSet
  - data-app.yaml                      # ApplicationSet for data services

  # 📨 MESSAGING ApplicationSet
  - messaging-app.yaml                 # ApplicationSet for messaging services

  # 🔐 IDENTITY ApplicationSet
  - identity-app.yaml                  # ApplicationSet for identity services

  # 🔥 CHAOS ENGINEERING - Chaos Mesh for resilience testing
  # - chaos-mesh/application.yaml        # ❌ DISABLED: Not needed for homelab

  # 👨‍💻 DEVELOPER ApplicationSet
  # - developer-app.yaml               # ❌ TODO: Create developer ApplicationSet

# 🎯 3-LEVEL CONTROL EXAMPLES:
#
# 🔧 NORMAL DAY-TO-DAY USE (Level 2 - Service Control):
# - Want to disable mongodb? → Comment it in data-app.yaml
# - Want to disable backstage? → Comment it in developer-app.yaml
# - Want to disable kafka? → Comment it in messaging-app.yaml
#
# 🛠️ FINE-GRAINED CONTROL (Level 3 - Component Control):
# - Want to disable n8n dev environment? → Comment n8n-dev/ in data/n8n/kustomization.yaml
# - Want to disable kafka ui? → Comment redpanda-console in messaging/kustomization.yaml
#
# 🚨 EXTREME SCENARIOS (Level 1 - Domain Control):
# - Testing: Comment data-app.yaml → ALL data services disabled
# - Migration: Comment messaging-app.yaml → ALL messaging services disabled
# - Debugging: Comment identity-app.yaml → ALL identity services disabled
